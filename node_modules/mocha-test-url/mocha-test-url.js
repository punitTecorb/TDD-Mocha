var assert   = require('assert');
var chai     = require('chai');
var chaiHttp = require('chai-http');
var Promise  = require('bluebird');

chai.use(chaiHttp);

var agent;
var urlHost   = '';
var urlLogin  = '';
var userArray = [];
var urlArray  = [];
var header    = {};
var keyHeader = [];
var timeOut   = 1500;
var showHtml  = false;

function runTest() {
	agent = chai.request.agent(urlHost);
	describe(`Test Permission User`, function () {
		return new Promise(function (resolve, reject) {
			userArray.forEach(function (user, i) {
				describe(`Test Permission User: ${user.email}`, function () {
					this.timeout(timeOut);
					it('User Login', function (done) {
						agent.post(urlLogin)
							 .send({email : user.email, password : user.password})
							 .then(function (res) {
								 if (res.statusCode === 200) console.log(`Login user ${user.email}`); else console.log(`Login Guest`);
								 if (user.title) console.log(user.title);
								 keyHeader.forEach(function (data) {
									 var dataJSON = JSON.parse(res.req.res.text);
									 if (dataJSON[data.value]) header[data.key] = dataJSON[data.value];
								 });
								 done();
							 }).catch(err => {
							done(err);
						})
					});

					urlArray.forEach(function (urlLoop, urlLoopIndex) {
						describe(urlLoop.title, function () {
							urlLoop.url.forEach(function (url) {
								var dataCheck = (url.checkByuser) ? url.checkByuser[i] : null;
								testUrl(url.title, url.path, url.method, (dataCheck) ? dataCheck : checkStatus(200), url.param);
							});
						});
						if (i === userArray.length - 1 && urlLoopIndex >= urlArray.length - 1) {
							resolve(true);
						}

					})

				});

			});
		});
	});
}

function runList() {
	describe(`Test Permission User`, function () {
		userArray.forEach(function (user, i) {
			it(`List User: ${user.email}`, function (done) {
				console.log(user.email);
				urlArray.forEach(function (urlLoop) {
					urlLoop.url.forEach(function (url) {
						console.log(`> ${url.path}`);
						var dataCheck = (url.checkByuser) ? url.checkByuser[i] : null;
						var code      = 200;
						if (dataCheck) code = dataCheck();
						console.log(`>> Check code: ${code}`);
					});
				});
				done();
			});
		});
	});
}

function checkJSON(status, hasValue, value) {
	return function (headerStatus, data) {
		if (headerStatus) {
			assert.equal(headerStatus, status);
			console.log('Success check status: ', headerStatus)
			if (data === "" || data === undefined) return false;
			var d = (data.indexOf('<!DOCTYPE html>') === -1) ? JSON.parse(data) : {};
			if(hasValue){
				// console.log(`Check Property JSON: ${hasValue}`);
				assert.equal(d.hasOwnProperty(hasValue), true);
				console.log('Success check key: ' + hasValue)
				if (typeof(value) !== 'undefined' && typeof(value) !== 'null' ) {
					assert.equal(d[hasValue], value);
					console.log('Success check value: ' + d[hasValue])
				}
			}
		} else {
			return status;
		}

	};
}

function checkStatus(status) {
	return function (headerStatus) {
		if (headerStatus) {
			assert.equal(headerStatus, status);
			console.log('Success check status: ', status)
		} else {
			return status;
		}
	};
}

function checkCustom(customFunction) {
	return function (headerStatus, data) {
		if (headerStatus) customFunction(headerStatus, data); else return null;
	}
}

function checkDataAndStatus(status, hasMessage) {
	return function (headerStatus, data) {
		if (headerStatus) {
			assert.equal(headerStatus, status);
			console.log('Success check status: ', headerStatus)
			if (data) {
				// console.log(`Check message: ${hasMessage}`);
				assert.notEqual(data.indexOf(hasMessage), -1);
				console.log('Success check data: ' + hasMessage)
			}
		} else {
			return status;
		}
	};
}

function checkStatusCodeFromResponse(res, functionCheck) {
	var html = res.text;
	if(showHtml === true) console.log(html);
	var statusCode = res.statusCode;
	if (!statusCode) statusCode = null;
	else if (statusCode === 200) statusCode = null;
	var dataRespon = (html.indexOf('<!DOCTYPE html>') === -1) ? JSON.parse(html) : {};
	if(dataRespon && dataRespon.hasOwnProperty('code') && dataRespon.code ) statusCode = dataRespon.code;
	var code = 200;
	if (/(400 ข้อมูลที่ได้รับไม่ถูกต้อง|ข้อมูลที่ได้รับไม่ถูกต้อง)/.test(html) || statusCode === 400) code = 400;
	else if (/(401 กรุณาเข้าสู่ระบบ|กรุณาเข้าสู่ระบบ)/.test(html) || statusCode === 401) code = 401;
	else if (/(ไม่มีสิทธิ์เข้าถึงคอนเทนต์ในส่วนนี้|403 ไม่อนุญาตให้เข้าถึงเนื้อหาในส่วนนี้)/.test(html) || statusCode === 403) code = 403;
	else if (/(404 ขออภัยไม่พบหน้าที่ต้องการ|ขออภัยไม่พบเนื้อหาที่ต้องการ)/.test(html) || statusCode === 404) code = 404;
	if (functionCheck) functionCheck(code, html);
}

function setGroup(title) {
	urlArray.push({
		title : (title) ? title : `Group ${urlArray.length + 1}`, url : []
	})
}

function setURLAndCheck(title, url, method, check, param) {
	if (urlArray.length === 0) {
		setGroup('Group 1')
	}
	urlArray[urlArray.length - 1].url.push({
		title : title, path : url, method : method, checkByuser : check, param : param
	})
}

function assertError(string) {
	assert.fail(null, null, string);
}

function testUrl(title, url, method, functionCheck, param) {
	if (!method) method = 'get'; else if (method === 'GET') method = 'get'; else if (method === 'POST') method = 'post'; else if (method === 'PUT') method = 'put';
	if (!functionCheck) functionCheck = null;
	if (!title) title = url;
	if (!param) param = null;
	it(title, function (done) {
		if (method === 'get') {
			agent.get(url)
				 .set(header)
				 // .send(param)
				 .then(function (res) {
					 checkStatusCodeFromResponse(res, functionCheck);
					 done();
				 }).catch(err => {
				done(err);
			})
		} else if (method === 'post') {
			agent.post(url)
				 .set(header)
				 .send(param)
				 .then(function (res) {
					 checkStatusCodeFromResponse(res, functionCheck);
					 done();
				 }).catch(err => {
				done(err);
			})
		} else if (method === 'put') {
			agent.put(url)
				 .set(header)
				 .send(param)
				 .then(function (res) {
					 checkStatusCodeFromResponse(res, functionCheck);
					 done();
				 }).catch(err => {
				done(err);
			})
		} else if (method === 'delete') {
			agent.delete(url)
				 .set(header)
				 .send(param)
				 .then(function (res) {
					 checkStatusCodeFromResponse(res, functionCheck);
					 done();
				 }).catch(err => {
				done(err);
			})
		}
	});
}

function addUser(email, password, title) {
	userArray.push({
		email : email, password : password, title : (title) ? title : null
	});
}

function setHost(url) {
	urlHost = url;
}

function setUrlLogin(url) {
	urlLogin = url;
}

function setHeaderTokey(value, key) {
	keyHeader.push({
		value : value, key : key
	});
}
function setTimeout(time) {
	timeOut = time;
}
function setShowHtml(check) {
	showHtml = check;
}

module.exports = {
	setHost            : setHost,
	setGroup           : setGroup,
	addUser            : addUser,
	setURLAndCheck     : setURLAndCheck,
	checkStatus        : checkStatus,
	checkJSON          : checkJSON,
	checkDataAndStatus : checkDataAndStatus,
	checkCustom        : checkCustom,
	runTest            : runTest,
	runList            : runList,
	assertError        : assertError,
	setUrlLogin        : setUrlLogin,
	setHeaderTokey     : setHeaderTokey,
	setTimeout		   : setTimeout,
	setShowHtml		   : setShowHtml,

};